{
  "hash": "4d7b5eb147895948ac598a1de0e6560f",
  "result": {
    "markdown": "# Quickly re-arranging data with pivots {#sec-pivots}\n\n\n\n\n\nHere we will continue using the *Workflow* block as we cover the fourth\nblock, \"*Work with project data*\" in @fig-overview-analyze-project-data.\n\n![Section of the overall workflow we will be\ncovering.](/images/overview-analyze-project-data.svg){#fig-overview-analyze-project-data}\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nBriefly go over the bigger picture (found in the introduction section)\nand remind everyone the 'what' and 'why' of what we are doing.\n:::\n\n## Learning objectives\n\n1.  Using the concept of \"pivoting\" to arrange data from long to wide\n    and vice versa.\n\n## Setup for the analysis in Quarto / R Markdown\n\nWe now have a working dataset to start doing some simple analyses on in\nthe Quarto / R Markdown document. A recommended workflow with Quarto / R\nMarkdown is to often render / \"knit\" it and make sure your analysis is\nreproducible (while on your computer). We already cleaned it up from the\nprevious session.\n\nWe will now add the `load()` code right below the `source()` function in\nthe `setup` code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(here(\"R/functions.R\"))\nload(here(\"data/mmash.rda\"))\n```\n:::\n\n\nAs we write more R code and do some simple analyses of the data, we are\ngoing to be knitting fairly often (depending on how long the analysis\ntakes of course). The main reason for this is to ensure that whatever\nyou are writing and coding will at least be reproducible on your\ncomputer, since Quarto / R Markdown is designed to ensure the document\nis reproducible.\n\nFor this specific workflow and for checking reproducibility, you should\noutput to HTML rather than to a Word document. While you can create a\nWord document by changing the `format: html` to `format: docx` (for\nQuarto only) at the top in the YAML header, you'd only do this when you\nneed to submit to a journal or need to email to co-authors for review.\nThe reason is simple: After you generate the Word document from Quarto /\nR Markdown, the Word file opens up and consequently Word locks the file\nfrom further edits. What that means is that every time you generate the\nWord document, you have to close it before you can generate it again,\notherwise knitting / rendering will fail. This can get annoying very\nquickly (trust me), since you don't always remember to close the Word\ndocument. If you output to HTML, this won't be a problem.\n\n## Re-arranging data for easier summarizing\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nLet them read through this section and then walk through it again and\nexplain it a bit more, making use of the tables and graphs. Doing both\nreading and listening again will help reinforce the concept of pivoting,\nwhich is usually quite difficult to grasp for those new to it.\n:::\n\n::: callout-note\n## Reading task: \\~6 minutes\n\nNow that we have the final dataset to work with, we want to explore it a\nbit with some simple descriptive statistics. One extremely useful and\npowerful tool to summarizing data is by \"pivoting\" your data. Pivoting\nis when you convert data between longer forms (more rows) and wider\nforms (more columns). The `{tidyr}` package within `{tidyverse}`\ncontains two wonderful functions for pivoting: `pivot_longer()` and\n`pivot_wider()`. There is a well written documentation on pivoting in\nthe [tidyr website](https://tidyr.tidyverse.org/articles/pivot.html)\nthat can explain more about it. The first thing we'll use, and probably\nthe more commonly used in general, is `pivot_longer()`. This function is\ncommonly used because entering data in the wide form is easier and more\ntime efficient than entering data in long form. For instance, if you\nwere measuring glucose values over time in participants, you might enter\ndata in like this:\n\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Example of a **wide** dataset that is useful for data entry.\n\n| person_id | glucose_0 | glucose_30 | glucose_60 |\n|:---------:|:---------:|:----------:|:----------:|\n|     1     |    5.6    |    7.8     |    4.5     |\n|     2     |    4.7    |    9.5     |    5.3     |\n|     3     |    5.1    |    10.2    |    4.2     |\n:::\n:::\n\n\nHowever, when it comes time to analyze the data, this wide form is very\ninefficient and difficult to computationally and statistically work\nwith. So, we do data entry in wide and use functions like\n`pivot_longer()` to get the data ready for analysis. @fig-pivot-longer\nvisually shows what happens when you pivot from wide to long.\n\n![Pivot longer in tidyr. New columns are called 'name' and 'value'.\nNotice how the values in `A` and `B` columns are stacked on top of each\nother in the newly created `V`\ncolumn.](/images/pivot-longer.png){#fig-pivot-longer width=\"90%\"}\n\nIf you had, for instance, an ID column for each participant, the\npivoting would look like what is shown in @fig-pivot-longer-id.\n\n![Pivot longer in tidyr, excluding an 'id' column. New columns are\ncalled 'name' and 'value', as well as the old 'id' column. Notice how,\nunlike the previous image, the `id` column is excluded when pivotting\ninto the data on the\nright.](/images/pivot-longer-id.png){#fig-pivot-longer-id width=\"90%\"}\n\nPivoting is a conceptually challenging thing to grasp, so don't be\ndisheartened if you can't understand how it works yet. As you practice\nusing it, you will understand it. With `pivot_longer()`, the first\nargument is the data itself. The other arguments are:\n\n1.  `cols`: The columns to use to convert to long form. The input is a\n    vector made using `c()` that contains the column names, like you\n    would use in `select()` (e.g. you can use the `select_helpers` like\n    `starts_with()`, or `-` minus to exclude).\n2.  `names_to`: Optional, the default is `name`. If provided, it will be\n    the name of the newly created column (as a quoted character) that\n    contains the original column names.\n3.  `values_to`: Optional, the default is `value`. Like `names_to`, sets\n    the name of the new columns.\n\nBoth `pivot_longer()` and its opposite `pivot_wider()`, which we will\ncover later in the session, are incredibly powerful functions. We can't\nshow close to everything it can do in this course, but if you want to\nlearn more, read up on the\n[documentation](https://tidyr.tidyverse.org/articles/pivot.html) for it.\n:::\n\nSince we'll be using `{tidyr}`, we will need to add it as a dependency\nby running this in the Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_package(\"tidyr\")\n```\n:::\n\n\nLet's try this out with `mmash`. In your `doc/learning.qmd` file, create\na new header called `## Pivot longer` and create a new code chunk below\nthat with {{< var keybind.chunk >}}. Now we can start typing in our\ncode:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmash %>%\n  # pivot every column\n  pivot_longer(everything())\n```\n\n::: {.cell-output .cell-output-error}\n```\n#> Error in `pivot_longer()`:\n#> ! Can't combine `user_id` <character> and `weight` <double>.\n```\n:::\n:::\n\n\nWhy the error? We get an error because we are trying to mix data types.\nWe can't have character data and number data in the same column. Let's\npivot only numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmash %>%\n  pivot_longer(where(is.numeric))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> # A tibble: 470 × 5\n#>    user_id gender samples      name             value\n#>    <chr>   <chr>  <chr>        <chr>            <dbl>\n#>  1 user_1  M      before sleep weight         6.5 e+1\n#>  2 user_1  M      before sleep height         1.69e+2\n#>  3 user_1  M      before sleep age            2.9 e+1\n#>  4 user_1  M      before sleep cortisol_norm  3.41e-2\n#>  5 user_1  M      before sleep melatonin_norm 1.74e-8\n#>  6 user_1  M      before sleep day            1   e+0\n#>  7 user_1  M      before sleep ibi_s_mean     6.66e-1\n#>  8 user_1  M      before sleep ibi_s_sd       1.64e-1\n#>  9 user_1  M      before sleep hr_mean        9.06e+1\n#> 10 user_1  M      before sleep hr_sd          1.30e+1\n#> # ℹ 460 more rows\n```\n:::\n:::\n\n\nNice! But not super useful. We can exclude specific columns from\npivoting with `-` before the column name, for instance with `user_id`\nand `day`. Let's drop the `samples` column before pivoting since `day`\ngives us the same information:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmash %>%\n  select(-samples) %>%\n  pivot_longer(c(-user_id, -day, -gender))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> # A tibble: 423 × 5\n#>    user_id gender   day name             value\n#>    <chr>   <chr>  <dbl> <chr>            <dbl>\n#>  1 user_1  M          1 weight         6.5 e+1\n#>  2 user_1  M          1 height         1.69e+2\n#>  3 user_1  M          1 age            2.9 e+1\n#>  4 user_1  M          1 cortisol_norm  3.41e-2\n#>  5 user_1  M          1 melatonin_norm 1.74e-8\n#>  6 user_1  M          1 ibi_s_mean     6.66e-1\n#>  7 user_1  M          1 ibi_s_sd       1.64e-1\n#>  8 user_1  M          1 hr_mean        9.06e+1\n#>  9 user_1  M          1 hr_sd          1.30e+1\n#> 10 user_1  M          2 weight         6.5 e+1\n#> # ℹ 413 more rows\n```\n:::\n:::\n\n\n## Exercise: Summarise your data after pivoting\n\n> Time: 15 minutes.\n\nUsing the `group_by()` and `summarise()` functions we learned in\n@sec-summarise-with-functionals, complete these tasks starting from this\ncode.\n\n``` r\nmmash %>% \n  select(-samples) %>% \n  pivot_longer(c(-user_id, -day, -gender)) %>% \n  ___\n```\n\n1.  Continuing the `%>%` from `pivot_longer()`, use `group_by()` to\n    group the data by `gender`, `day`, and `name` (the long form column\n    produced from `pivot_longer()`).\n2.  After grouping with `group_by()`, use `summarise()` and `across()`\n    on the `value` column and find the mean and standard deviation (put\n    them into a named list like we did previously). Don't forget to use\n    `na.rm = TRUE` to exclude missing values.\n3.  Stop the grouping effect with `ungroup()`.\n4.  Run `{styler}` while in the `doc/learning.qmd` file with\n    {{< var keybind.styler >}}.\n5.  Render the Quarto file into HTML with {{< var keybind.render >}}.\n6.  Open up the Git interface and **add and commit** the changes to\n    `doc/learning.qmd` with {{< var keybind.git >}}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"**Click for the solution**. Only click if you are struggling or are out of time.\"}\nmmash %>%\n  select(-samples) %>%\n  pivot_longer(c(-user_id, -day, -gender)) %>%\n  group_by(gender, day, name) %>%\n  summarise(across(\n    value,\n    list(\n      mean = ~ mean(.x, na.rm = TRUE),\n      sd = ~ sd(.x, na.rm = TRUE)\n    )\n  )) %>%\n  ungroup()\n```\n:::\n\n\n## Pivot data to wider form\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nLike with the pivoting to long section, let them read through this\nsection first and than go over it again to verbally explain it more,\nmaking use of the graphs to help illustrate what is happening. Doing\nboth reading and listening will help reinforce the concepts.\n:::\n\n::: callout-note\n## Reading task: \\~6 minutes\n\nAfter using `pivot_longer()` on the summarised data, it looks nice, but\nit could be better. Right now it is in a pretty long form, but for\nshowing as a table, having columns for either `gender` or `day` would\nmake it easier to compare the mean and SD values we obtain. This is\nwhere we can use `pivot_wider()` to get the data wider rather than long.\nThe arguments for `pivot_wider()` are very similar to those in\n`pivot_longer()`, except instead of `names_to` and `values_to`, they are\ncalled `names_from` and `values_from`. Like with many R functions, the\nfirst argument is the data and the other arguments are:\n\n1.  `id_cols`: This is optional as it will default to all column names.\n    This argument tells `pivot_wider()` to use the given columns as the\n    identifiers for when converting. Unlike `pivot_longer()` which\n    doesn't require some type of \"key\" or \"id\" column to convert to long\n    form, the conversion to wide form requires some type of \"key\" or\n    \"id\" column because `pivot_wider()` needs to know which rows belong\n    with each other.\n2.  `names_from`: Similar to the `pivot_longer()`, this is the name of\n    the column that has the values that will make up the new columns.\n    Unlike with the `names_to` argument in `pivot_longer()` which takes\n    a character string as input, the column name for `names_from` must\n    be *unquoted* because you are selecting a column that already exists\n    in the dataset.\n3.  `values_from`: Same as `names_from`, this is the column name (that\n    exists and must be given *unquoted*) for the values that will be in\n    the new columns.\n\n@fig-pivot-wider visually shows what's happening when using\n`pivot_wider()`.\n\n![Pivot wider in tidyr, where a set of stacked \"groups\" in the data on\nthe left are placed side-by-side as new columns in the output data on\nthe right. Notice how the values in the column `N`, which is used in the\n`names_from` argument, are used as the names for the new columns `A` and\n`B` in the new data.](/images/pivot-wider.png){#fig-pivot-wider\nwidth=\"90%\"}\n:::\n\nIn our case, we want either `gender` or `day` as columns with the mean\nand SD values. Let's use `pivot_wider()` on `day` to see differences\nbetween days.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmash %>%\n  select(-samples) %>%\n  pivot_longer(c(-user_id, -day, -gender)) %>%\n  group_by(gender, day, name) %>%\n  summarise(across(\n    value,\n    list(\n      mean = ~ mean(.x, na.rm = TRUE),\n      sd = ~ sd(.x, na.rm = TRUE)\n    )\n  )) %>%\n  ungroup() %>%\n  pivot_wider(names_from = day)\n```\n\n::: {.cell-output .cell-output-error}\n```\n#> Error in `pivot_wider()`:\n#> ! Can't subset columns past the end.\n#> ℹ Location 10 doesn't exist.\n#> ℹ There are only 5 columns.\n```\n:::\n:::\n\n\nHmm, didn't work. Nothing has been pivoted to wider. That's because we\nare missing the `value_from` argument. Since we actually have the two\n`value_mean` and `value_sd` columns that have \"values\" in them, we need\nto tell `pivot_wider()` to use those two columns. Since `values_from`\nworks similar to `select()`, we can use `starts_with()` to select the\ncolumns starting with `\"values\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmash %>%\n  select(-samples) %>%\n  pivot_longer(c(-user_id, -day, -gender)) %>%\n  group_by(gender, day, name) %>%\n  summarise(across(\n    value,\n    list(\n      mean = ~ mean(.x, na.rm = TRUE),\n      sd = ~ sd(.x, na.rm = TRUE)\n    )\n  )) %>%\n  ungroup() %>%\n  pivot_wider(names_from = day, values_from = starts_with(\"value\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> # A tibble: 18 × 10\n#>    gender name           value_mean_1 value_mean_2 value_mean_NA\n#>    <chr>  <chr>                 <dbl>        <dbl>         <dbl>\n#>  1 M      age                 2.60e+1      2.60e+1            28\n#>  2 M      cortisol_norm       2.81e-2      6.99e-2           NaN\n#>  3 M      height              1.80e+2      1.80e+2           175\n#>  4 M      hr_mean             8.10e+1      6.69e+1           NaN\n#>  5 M      hr_sd               1.27e+1      1.55e+1           NaN\n#>  6 M      ibi_s_mean          7.60e-1      9.21e-1           NaN\n#>  7 M      ibi_s_sd            1.77e-1      2.78e-1           NaN\n#>  8 M      melatonin_norm      8.33e-9      6.96e-9           NaN\n#>  9 M      weight              7.53e+1      7.53e+1            70\n#> 10 <NA>   age               NaN          NaN                  NA\n#> 11 <NA>   cortisol_norm     NaN          NaN                  NA\n#> 12 <NA>   height            NaN          NaN                  NA\n#> 13 <NA>   hr_mean             7.96e+1      7.04e+1            NA\n#> 14 <NA>   hr_sd               1.09e+1      1.78e+1            NA\n#> 15 <NA>   ibi_s_mean          7.58e-1      8.56e-1            NA\n#> 16 <NA>   ibi_s_sd            1.14e-1      1.90e-1            NA\n#> 17 <NA>   melatonin_norm    NaN          NaN                  NA\n#> 18 <NA>   weight            NaN          NaN                  NA\n#> # ℹ 5 more variables: `value_mean_-29` <dbl>, value_sd_1 <dbl>,\n#> #   value_sd_2 <dbl>, value_sd_NA <dbl>, `value_sd_-29` <dbl>\n```\n:::\n:::\n\n\nNow we have a different problem. There are missing values in both the\n`day` and `gender` columns that, at least in this case, we don't want\npivoted. Shouldn't they be removed when we include `na.rm = TRUE` in our\ncode? The function of `na.rm = TRUE` is not to remove `NA` values, but\nto instead tell R to not include variables in `mmash` that are `NA` when\ncalculating the mean and standard deviation. In this particular case,\nthe columns `value_mean_NA` or `value_mean_-29` have `NA` or `NaN`\nvalues because there are no other values in the data *other than* `NA`.\nSince we don't actually care about missing days (or the random `-29`\nday), we can remove missing values with the function called `drop_na()`.\nWe also don't care about missing `gender` values, so we'll drop them as\nwell. Add it in the pipe right before `group_by()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmash %>%\n  select(-samples) %>%\n  pivot_longer(c(-user_id, -day, -gender)) %>%\n  drop_na(day, gender) %>%\n  group_by(gender, day, name) %>%\n  summarise(across(\n    value,\n    list(\n      mean = ~ mean(.x, na.rm = TRUE),\n      sd = ~ sd(.x, na.rm = TRUE)\n    )\n  )) %>%\n  ungroup() %>%\n  pivot_wider(names_from = day, values_from = starts_with(\"value\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> # A tibble: 9 × 6\n#>   gender name        value_mean_1 value_mean_2 value_sd_1 value_sd_2\n#>   <chr>  <chr>              <dbl>        <dbl>      <dbl>      <dbl>\n#> 1 M      age              2.60e+1      2.60e+1    7.28e+0    7.28e+0\n#> 2 M      cortisol_n…      2.81e-2      6.99e-2    3.05e-2    5.32e-2\n#> 3 M      height           1.80e+2      1.80e+2    8.34e+0    8.34e+0\n#> 4 M      hr_mean          8.10e+1      6.69e+1    7.65e+0    6.77e+0\n#> 5 M      hr_sd            1.27e+1      1.55e+1    4.95e+0    7.03e+0\n#> 6 M      ibi_s_mean       7.60e-1      9.21e-1    7.97e-2    9.11e-2\n#> 7 M      ibi_s_sd         1.77e-1      2.78e-1    8.60e-2    1.25e-1\n#> 8 M      melatonin_…      8.33e-9      6.96e-9    6.71e-9    6.39e-9\n#> 9 M      weight           7.53e+1      7.53e+1    1.31e+1    1.31e+1\n```\n:::\n:::\n\n\nNow that that works, let's render the document to HTML with\n{{< var keybind.render >}}.\n\n## Exercise: Convert this code into a function\n\n> Time: 15 minutes.\n\nUsing the same workflow we've been doing throughout this course, convert\nthe code we just wrote above into a function.\n\n1.  Name the function `tidy_summarise_by_day`.\n2.  Create one argument called `data`. Create a new variable inside the\n    function called `daily_summary` and put it in `return()` so the\n    function outputs it.\n3.  Test that the function works.\n4.  Add Roxygen documentation with {{< var keybind.roxygen >}} and use\n    explicit function calls with `packagename::`.\n    -   Don't forget, you can use `?functionname` to find out which\n        package the function comes from.\n5.  Move the newly created function over into the `R/functions.R` file.\n6.  Run `{styler}` while in the `R/functions.R` file with\n    {{< var keybind.styler >}}.\n7.  Restart R with {{< var keybind.restart-r >}}, go into the\n    `doc/learning.qmd` file and run the `setup` code chunk in the Quarto\n    document with the `source()` and `load()` commands. Then test that\n    the new function works in a code chunk at the bottom of the\n    document.\n8.  Render the Quarto document to HTML with {{< var keybind.render >}}.\n9.  Add and commit the changes to the Git history with\n    {{< var keybind.git >}}.\n\nUse this code to refresh your memory on how functions are structured and\nto use as a starting point:\n\n``` r\n___ <- function(___) {\n    \n}\n```\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"**Click for the solution**. Only click if you are struggling or are out of time.\"}\n#' Calculate tidy summary statistics by day.\n#'\n#' @param data The MMASH dataset.\n#'\n#' @return A data.frame/tibble.\n#'\ntidy_summarise_by_day <- function(data) {\n  daily_summary <- data %>%\n    dplyr::select(-samples) %>%\n    tidyr::pivot_longer(c(-user_id, -day, -gender)) %>%\n    tidyr::drop_na(day, gender) %>%\n    dplyr::group_by(gender, day, name) %>%\n    dplyr::summarise(dplyr::across(\n      value,\n      list(\n        mean = ~ mean(.x, na.rm = TRUE),\n        sd = ~ sd(.x, na.rm = TRUE)\n      )\n    )) %>%\n    dplyr::ungroup() %>%\n    tidyr::pivot_wider(\n      names_from = day,\n      values_from = dplyr::starts_with(\"value\")\n    )\n  return(daily_summary)\n}\n\n# Testing that the function works.\nmmash %>%\n  tidy_summarise_by_day()\n```\n:::\n\n\n## Extending the function to use other statistics and to be tidier\n\nNow that we've made the tidy summary code into a function, let's make it\nmore generic so we can use other summary statistics and to have the\noutput be a bit tidier. For instance, it would be nice to be able to do\nsomething like this:\n\n``` r\nmmash %>% \n    tidy_summarise_by_day(median)\nmmash %>% \n    tidy_summarise_by_day(max)\nmmash %>% \n    tidy_summarise_by_day(list(median = median, max = max))\n```\n\nBefore we get to adding this functionality, let's first make it so the\nfunction has a tidier output. Specifically, we want to round the values\nso they are easier to read. Go into the `R/functions.R` script to the\n`tidy_summarize_by_day()` function. We'll create a new line right after\nthe `dplyr::summarise()` function, after the `%>%` pipe. Since we want\nto round values of existing columns, we need to use `mutate()`. And like\nwe used `across()` in `summarise()`, we can also use `across()` within\n`mutate()` on specific columns. In our case, we want to round columns\nthat `start_with()` the word `\"value\"` to 2 digits.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_summarise_by_day <- function(data) {\n  data %>%\n    dplyr::select(-samples) %>%\n    tidyr::pivot_longer(c(-user_id, -day, -gender)) %>%\n    tidyr::drop_na(day, gender) %>%\n    dplyr::group_by(gender, day, name) %>%\n    dplyr::summarise(dplyr::across(\n      value,\n      list(\n        mean = ~ mean(.x, na.rm = TRUE),\n        sd = ~ sd(.x, na.rm = TRUE)\n      )\n    )) %>%\n    dplyr::mutate(dplyr::across(\n      dplyr::starts_with(\"value\"),\n      ~ round(.x, digits = 2)\n    )) %>%\n    tidyr::pivot_wider(\n      names_from = day,\n      values_from = dplyr::starts_with(\"value\")\n    )\n}\n\n# Source, then test out the function in the Console:\ntidy_summarise_by_day(mmash)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> # A tibble: 9 × 6\n#>   gender name        value_mean_1 value_mean_2 value_sd_1 value_sd_2\n#>   <chr>  <chr>              <dbl>        <dbl>      <dbl>      <dbl>\n#> 1 M      age                26.0         26.0        7.28       7.28\n#> 2 M      cortisol_n…         0.03         0.07       0.03       0.05\n#> 3 M      height            180.         180.         8.34       8.34\n#> 4 M      hr_mean            81.0         66.9        7.65       6.77\n#> 5 M      hr_sd              12.7         15.5        4.95       7.03\n#> 6 M      ibi_s_mean          0.76         0.92       0.08       0.09\n#> 7 M      ibi_s_sd            0.18         0.28       0.09       0.13\n#> 8 M      melatonin_…         0            0          0          0   \n#> 9 M      weight             75.3         75.3       13.0       13.0\n```\n:::\n:::\n\n\nThat's much easier to read with the values rounded. Now let's add the\nability to change the summary statistics function to something else.\nThis is a surprisingly easy thing so before we do that, let's take a few\nminutes to brainstorm how we can achieve this.\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nGet the groups to chat together for about 5 minutes to think about how\nthey'd do that. Ask that they don't look ahead in the text. After that,\ndiscuss some ways to add the functionality.\n:::\n\nNow that we've discussed this and come to a conclusion, let's update the\nfunction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_summarise_by_day <- function(data, summary_fn) {\n  data %>%\n    dplyr::select(-samples) %>%\n    tidyr::pivot_longer(c(-user_id, -day, -gender)) %>%\n    tidyr::drop_na(day, gender) %>%\n    dplyr::group_by(gender, day, name) %>%\n    dplyr::summarise(dplyr::across(\n      value,\n      summary_fn\n    )) %>%\n    dplyr::mutate(dplyr::across(\n      dplyr::starts_with(\"value\"),\n      ~ round(.x, digits = 2)\n    )) %>%\n    tidyr::pivot_wider(\n      names_from = day,\n      values_from = dplyr::starts_with(\"value\")\n    )\n}\n\n# Source, then test out the function in the Console:\ntidy_summarise_by_day(mmash, ~ max(.x, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> # A tibble: 9 × 4\n#>   gender name              `1`    `2`\n#>   <chr>  <chr>           <dbl>  <dbl>\n#> 1 M      age             40     40   \n#> 2 M      cortisol_norm    0.16   0.26\n#> 3 M      height         205    205   \n#> 4 M      hr_mean         97.5   83.1 \n#> 5 M      hr_sd           31.9   38.6 \n#> 6 M      ibi_s_mean       0.96   1.06\n#> 7 M      ibi_s_sd         0.44   0.56\n#> 8 M      melatonin_norm   0      0   \n#> 9 M      weight         115    115\n```\n:::\n:::\n\n\nNow that it works, let's add some summary statistics to the\n`doc/learning.qmd` file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmash %>%\n  tidy_summarise_by_day(max)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> # A tibble: 9 × 4\n#>   gender name              `1`    `2`\n#>   <chr>  <chr>           <dbl>  <dbl>\n#> 1 M      age             40     40   \n#> 2 M      cortisol_norm    0.16   0.26\n#> 3 M      height         205    205   \n#> 4 M      hr_mean         97.5   NA   \n#> 5 M      hr_sd           31.9   NA   \n#> 6 M      ibi_s_mean       0.96  NA   \n#> 7 M      ibi_s_sd         0.44  NA   \n#> 8 M      melatonin_norm   0      0   \n#> 9 M      weight         115    115\n```\n:::\n\n```{.r .cell-code}\nmmash %>%\n  tidy_summarise_by_day(median)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> # A tibble: 9 × 4\n#>   gender name              `1`    `2`\n#>   <chr>  <chr>           <dbl>  <dbl>\n#> 1 M      age             27     27   \n#> 2 M      cortisol_norm    0.02   0.06\n#> 3 M      height         180    180   \n#> 4 M      hr_mean         79.3   NA   \n#> 5 M      hr_sd           12.1   NA   \n#> 6 M      ibi_s_mean       0.77  NA   \n#> 7 M      ibi_s_sd         0.15  NA   \n#> 8 M      melatonin_norm   0      0   \n#> 9 M      weight          70     70\n```\n:::\n\n```{.r .cell-code}\nmmash %>%\n  tidy_summarise_by_day(list(\n    median = ~ median(.x, na.rm = TRUE), \n    max = ~ max(.x, na.rm = TRUE)\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> # A tibble: 9 × 6\n#>   gender name  value_median_1 value_median_2 value_max_1 value_max_2\n#>   <chr>  <chr>          <dbl>          <dbl>       <dbl>       <dbl>\n#> 1 M      age            27             27          40          40   \n#> 2 M      cort…           0.02           0.06        0.16        0.26\n#> 3 M      heig…         180            180         205         205   \n#> 4 M      hr_m…          79.3           66.4        97.5        83.1 \n#> 5 M      hr_sd          12.1           14.3        31.9        38.6 \n#> 6 M      ibi_…           0.77           0.91        0.96        1.06\n#> 7 M      ibi_…           0.15           0.21        0.44        0.56\n#> 8 M      mela…           0              0           0           0   \n#> 9 M      weig…          70             70         115         115\n```\n:::\n:::\n\n\nBefore continuing, let's render the Quarto document with\n{{< var keybind.render >}} to check reproducibility.\n\n## Making prettier output in Quarto / R Markdown\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nCan go over this quite quickly after they've (optionally) finished the\nprevious exercise.\n:::\n\nWhat we created is nice and all, but since we are working in a Quarto /\nR Markdown document and generating to HTML, let's make it easier for\nothers (including yourself) to read the document. Let's make the output\nas an actual table. We can do that with `knitr::kable()` (meaning \"knitr\ntable\"). We can also add a table caption with the `caption` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmash %>%\n  tidy_summarise_by_day(list(\n    mean = ~ mean(.x, na.rm = TRUE), \n    min = ~ min(.x, na.rm = TRUE), \n    max = ~ max(.x, na.rm = TRUE)\n  )) %>%\n  knitr::kable(caption = \"Descriptive statistics of some variables.\")\n```\n\n::: {.cell-output-display}\nTable: Descriptive statistics of some variables.\n\n|gender |name           | value_mean_1| value_mean_2| value_min_1| value_min_2| value_max_1| value_max_2|\n|:------|:--------------|------------:|------------:|-----------:|-----------:|-----------:|-----------:|\n|M      |age            |        25.95|        25.95|        0.00|        0.00|       40.00|       40.00|\n|M      |cortisol_norm  |         0.03|         0.07|        0.01|        0.02|        0.16|        0.26|\n|M      |height         |       180.14|       180.14|      169.00|      169.00|      205.00|      205.00|\n|M      |hr_mean        |        80.96|        66.89|       70.27|       56.84|       97.47|       83.10|\n|M      |hr_sd          |        12.70|        15.49|        7.85|        7.64|       31.86|       38.61|\n|M      |ibi_s_mean     |         0.76|         0.92|        0.62|        0.75|        0.96|        1.06|\n|M      |ibi_s_sd       |         0.18|         0.28|        0.09|        0.15|        0.44|        0.56|\n|M      |melatonin_norm |         0.00|         0.00|        0.00|        0.00|        0.00|        0.00|\n|M      |weight         |        75.29|        75.29|       60.00|       60.00|      115.00|      115.00|\n:::\n:::\n\n\nThen render the document with {{< var keybind.render >}} and check out\nthe HTML file. So pretty! :grin: Well, there's lots of things to fix up,\nbut its a good starting place. Let's finish by running `{styler}` with\n{{< var keybind.styler >}} and then committing the changes to the Git\nhistory with {{< var keybind.git >}}.\n\n## Summary\n\n-   Data is usually structured to varying degrees as wide or long\n    format.\n    -   Use `pivot_longer()` to convert from wide to long.\n    -   Use `pivot_wider()` to convert from long to wide.\n",
    "supporting": [
      "pivots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}