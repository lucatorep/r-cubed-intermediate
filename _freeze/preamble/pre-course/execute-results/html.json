{
  "hash": "816dfd00257f77cffbef78dc889714c9",
  "result": {
    "markdown": "# Pre-course tasks {#sec-pre-course}\n\n\n\n\n\nIn order to participate in this course, you must complete this section\nfor the pre-course tasks and finish with **completing the\n[survey](https://docs.google.com/forms/d/e/1FAIpQLSe2gpbN9ExCXyeTfJLgu_poemF0iUtkcihnCunXl3YA4e1hHQ/viewform?usp=sf_link)**\nat the end. These tasks are designed to make it easier for everyone to\nstart the course with everything set up. For some of the tasks, you\nmight not understand why you need to do them, but you will likely\nunderstand why once the course begins.\n\nDepending on your skills and knowledge, these tasks could take between\n**3-7 hrs to finish**, so we suggest planning a full day to complete\nthem. Depending on your institution and how they handle installing\nsoftware on work computers, you also might have to contact IT very early\nto make sure everything is properly installed and set up.\n\n## List of tasks\n\nHere's the list of tasks you need to do. Specific details about them are\nfound as you work through the tasks.\n\n1.  Read the learning objectives in @sec-pre-course-learning-objectives\n    for the pre-course tasks (below).\n2.  Read the [\"How to read the\n    website\"](https://guides.rostools.org/pre-course.html#reading-website)\n    (on a new website).\n3.  Follow the [installation\n    instructions](https://guides.rostools.org/pre-course.html#installation-instructions)\n    (on a new website). Install a version of R, RStudio, and Git that is\n    as updated as possible. For some people, depending on their\n    institution, this task can take the **longest amount of time**\n    because you have to contact your IT to install these packages.\n4.  Install the necessary R packages in @sec-install-r-packages.\n5.  Read about Git from the introduction course and configure Git on\n    your computer in @sec-setup-git. If you haven't used Git before,\n    this task could take a while because of the reading. Run the checks\n    in this subsection to see if everything works. You'll later need to\n    paste this output into the survey.\n6.  Create an R Project in @sec-create-r-project, including the folder\n    and files.\n7.  Create an R Markdown / Quarto file in @sec-quarto.\n8.  Write R code to download the data in @sec-download-data and save it\n    to your computer. This task will probably take up the most time,\n    maybe 30-90 minutes. Run a check in this subsection to see that\n    everything is as expected. You'll later need to paste this output\n    into the survey.\n9.  Read about the basic course details in @sec-course-details.\n10. Read the syllabus in @sec-syllabus.\n11. Read the [Code of\n    Conduct](https://guides.rostools.org/conduct.html).\n12. **Complete the pre-course\n    [survey](https://docs.google.com/forms/d/e/1FAIpQLSe2gpbN9ExCXyeTfJLgu_poemF0iUtkcihnCunXl3YA4e1hHQ/viewform?usp=sf_link)**.\n    This survey is pretty quick, maybe \\~10 minutes.\n\nCheck each section for exact details on completing these tasks.\n\n## Learning objectives {#sec-pre-course-learning-objectives}\n\nIn general, these pre-course tasks are meant to help prepare you for the\ncourse and make sure everything is setup properly so the first session\nruns smoothly. However, some of these tasks are meant for learning as\nwell as for general setup, so we have defined the following learning\nobjectives for this page:\n\n1.  Learn about making reproducible documents with R Markdown.\n2.  Learn about filesystems, relative and absolute paths, and how to\n    make use of the `{fs}` R package to navigate files in your project.\n3.  Learn where to store your raw data so that you can use scripts as a\n    record of what was done to process the data before analyzing it, and\n    why that's important.\n\n## Programs to install\n\nMake sure to install as updated versions of R, RStudio, and Git as\npossible by following these [installation\ninstructions](https://guides.rostools.org/pre-course.html#installation-instructions)\non the Guides website. For some people, depending on their institution\nand their specific computer, this task can take the **longest amount of\ntime** because you have to contact your IT to install these packages or\ndo troubleshooting because of issues specific to your computer setup. It\nis extremely difficult to predict who will and who won't have issues\nwith these installation tasks.\n\n## Installing the R packages {#sec-install-r-packages}\n\nWe will be using specific R packages for the course, so you will need to\ninstall them. A detailed walkthrough for installing the necessary\npackages is available on the [pre-course tasks for installing\npackages](https://r-cubed-intro.rostools.org/preamble/pre-course.html#installing-r-packages)\nsection of the introduction course, however, you only need to install\nthe r3 helper package in order to install all the necessary packages by\nrunning these commands in the R Console:\n\n1.  Install the `{pak}` package:\n\n    ``` r\n    install.packages(\"pak\")\n    ```\n\n2.  Install the r3 helper package for this course:\n\n    ``` r\n    pak::pak(\"rostools/r3\")\n    ```\n\n3.  Install the necessary packages for the course:\n\n    ``` r\n    r3::install_packages_intermediate()\n    ```\n\n::: callout-warning\nYou might encounter an error when running this code. That's ok, you can\nfix it if you restart R by going to `Sessions -> Restart R` and re-run\nthe code in items 2 and 3, it should work. If it still doesn't, try to\ncomplete the other tasks, complete the survey, and let us know you have\na problem in the survey.\n:::\n\n*Note*: When you see a command like `something::something()`, for\nexample with `r3::install_packages_intermediate()`, you would \"read\"\nthis as:\n\n> R, can you please use the `install_packages_intermediate` function\n> from the r3 package.\n\nThe normal way of doing this would be to load the package with\n`library(r3)` and then running the command\n(`install_packages_intermediate()`). But by using the `::`, we tell R to\ndirectly use a function from a package, without needing to load the\npackage and all of its other functions too. We use this trick because we\nonly want to use the `install_packages_intermediate()` command from the\nr3 package and not have to load all the other functions as well. In this\ncourse we will be using `::` often.\n\n## Setting up Git {#sec-setup-git}\n\nSince Git has already been covered in the Introduction course, we won't\ncover *learning it* during this course. However, since version control\nis a fundamental component of any modern data analysis workflow and\n*should be used*, we **will be using it throughout the course**. If you\nhave used or currently use Git, you can skip this section. If you\nhaven't used it, please do these tasks:\n\n1.  Follow the [pre-course tasks for\n    Git](https://r-cubed-intro.rostools.org/preamble/pre-course.html#setting-up-git-and-github)\n    (*not* the GitHub tasks) from the introduction course. Specifically,\n    type in the RStudio Console:\n\n    ``` r\n    # A pop-up to type in your name (first and last), \n    # as well as your email\n    r3::setup_git_config()\n    ```\n\n2.  **Please read** through the [Version Control\n    lesson](https://r-cubed-intro.rostools.org/sessions/version-control.html)\n    of the introduction course. *You don't need to do any of the\n    exercises or activities*, but you are welcome to do them if it will\n    help you learn or understand it better. For most of the course, we\n    will be using Git as shown in the [Using Git in\n    RStudio](https://r-cubed-intro.rostools.org/sessions/version-control.html#using-git-in-rstudio)\n    section. Later on during the course, we might connect our projects\n    to GitHub, which is described in the [Synchronizing with\n    GitHub](https://r-cubed-intro.rostools.org/sessions/version-control.html#synchronizing-with-github)\n    section.\n\nRegardless of whether you've done the steps above or not, *everyone*\nneeds to run:\n\n``` r\nr3::check_setup()\n```\n\nThe output you'll get for success will look something like this:\n\n```         \nChecking R version:\n✔ Your R is at the latest version of 4.2.0!\nChecking RStudio version:\n✔ Your RStudio is at the latest version of 2022.2.2.485!\nChecking Git config settings:\n✔ Your Git configuration is all setup!\n  Git now knows that:\n  - Your name is 'Luke W. Johnston'\n  - Your email is 'lwjohnst@gmail.com'\n```\n\n**Eventually you will need to copy and paste the output into one of the\nsurvey questions**. *Note* that while GitHub is a natural connection to\nusing Git, given the limited time available, we will not be going over\nhow to use GitHub. If you want to learn about using GitHub, check out\nthe\n[session](https://r-cubed-intro.rostools.org/sessions/version-control.html)\non it in the introduction course.\n\n## Create an R Project {#sec-create-r-project}\n\nOne of the basic steps to reproducibility and modern workflows in data\nanalysis is to keep everything contained in a single location. In\nRStudio, this is done with R Projects. Please read all of [Section\n7.1](https://r-cubed-intro.rostools.org/sessions/project-management.html#what-is-a-project-and-why-use-it)\nfrom the introduction course to learn about R Projects and how they help\nkeeping things self-contained. *You don't need to do any of the\nexercises or activities*.\n\n::: callout-danger\nBefore creating and setting up the project folder, there are two things\nwe strongly strongly encourage:\n\n1.  Don't create the project on your Dropbox, OneDrive, or other\n    backup/synching service. The reason being that they don't integrate\n    well with Git because of how they synchronize things. Plus, we will\n    be re-generating files often, which causes these services to\n    constantly be working to synchronize these files.\n2.  Don't create the project on any shared drive (like `H:` or `E:` or\n    `U:` drives on Windows). Because these folders are remote locations\n    on an external server, they can really slow things down when working\n    with Git, R, and RStudio. Create the project on your actual\n    computer, like the `C:` drive in Windows or `/Users/` on Mac.\n\nThese two things are the biggest source of errors, troubleshooting, and\nissues with participants when they do the course.\n:::\n\nThere are several ways to organise a project folder. We'll be using the\nstructure from the package `{prodigenr}`. The project setup can be done\nby either:\n\n1.  Using RStudio's New Project menu item: \"File -\\> New Project -\\> New\n    Directory\", scroll down to \"Scientific Analysis Project using\n    prodigenr\" and name the project \"LearnR3\" in the Directory Name,\n    saving it to the \"Desktop\" with Browse.\n2.  Or, running the command\n    `prodigenr::setup_project(\"~/Desktop/LearnR3\")` in the R Console.\n\n\n\n\n\nWhen the RStudio Project opens up again, run these three commands in the\nR Console:\n\n``` r\nprodigenr::setup_with_git()\nusethis::use_blank_slate()\nusethis::use_r(\"functions\", open = FALSE)\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n#> ✔ Setting active project to '/tmp/Rtmpr6cQ6r/LearnR3'\n#> ℹ You'll need to restart RStudio to see the Git pane.\n#> \n#> • Edit 'R/functions.R'\n#> • Call `use_test()` to create a matching test file\n#> ✔ Setting active project to '<no active project>'\n```\n:::\n:::\n\n\nHere we use the [usethis](https://usethis.r-lib.org/) package to help\nset things up. usethis is an extremely useful package for managing R\nProjects and we highly recommend checking it out more to see how you can\nuse it more in your own work.\n\n## R Markdown / Quarto {#sec-quarto}\n\nWe teach and use R Markdown / [Quarto](https://quarto.org) because it is\none of the very first steps to being reproducible and because it is a\nvery powerful tool to doing data analysis. Please do these two tasks:\n\n1.  Please read over the [R Markdown\n    section](https://r-cubed-intro.rostools.org/sessions/reproducible-documents.html#what-is-r-markdown-and-quarto)\n    of the introduction course. If you use R Markdown / Quarto already,\n    you can skip this step.\n\n2.  Open up the `LearnR3` project, either by clicking the\n    `LearnR3.Rproj` file or by using the \"File -\\> Open Project\" menu.\n    Run the function below in the Console when RStudio is in the\n    `LearnR3` project, which will create a new file called\n    `learning.qmd` in the `doc/` folder.\n\n    ``` r\n    r3::create_qmd_doc()\n    ```\n\n\n\n\n\n## Download the course data {#sec-download-data}\n\nTo best demonstrate the concepts in the course, we ideally should work\non a real dataset to apply what we're going to learn. So for this\ncourse, we're going to use an openly licensed dataset on monitoring\nsleep and activity (MMASH) [@Rossi2020; @Rossi2020a]. To begin learning\nabout being reproducible and applying modern approaches to data\nanalysis, we're going to write and save R code to download a dataset,\nprepare it a bit so it's at least a little usable, and than save it to\nyour computer. The goal at the end of the course is to create a pipeline\nto download the data, process and clean it, and save it in a form that\nmakes it easier to analyze. Why don't we get you to download an already\ncleaned and prepared dataset? Because in the real world, the data you\nget is rarely all cleaned up and ready for you, and this course is about\nlearning more advanced tools to do the data wrangling. Look over these\ntasks and than switch over to the [MMASH\nwebsite](https://physionet.org/content/mmash/1.0.0/):\n\n1.  Look through the Data Description to get familiar with the dataset\n    and see what is contained inside of it. We'll refer back to the Data\n    Description throughout the course as well as in the exercises.\n2.  Look over the open license that allows you to re-use it, even for\n    research purposes. Note: GDPR makes it stricter on how to share and\n    use personal data, but it *does not prohibit sharing it or making it\n    public*! GDPR and Open Data are not in conflict.\n\n> *Note*: Sometimes the PhysioNet website is slow. If that's the case,\n> use [**this alternative link**](resources/mmash-page.html) instead.\n\nAfter looking over the MMASH website, you need to setup where to store\nthe dataset to prepare it for later processing. While in your `LearnR3`\nR Project, go to the Console pane in RStudio and type out:\n\n``` r\nusethis::use_data_raw(\"mmash\")\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n#> ✔ Setting active project to '/tmp/Rtmpr6cQ6r/LearnR3'\n#> ✔ Adding '^data-raw$' to '.Rbuildignore'\n#> ✔ Writing 'data-raw/mmash.R'\n#> • Finish the data preparation script in 'data-raw/mmash.R'\n#> • Use `usethis::use_data()` to add prepared data to package\n#> ✔ Setting active project to '<no active project>'\n```\n:::\n:::\n\n\nWhat this function does is create a new folder called `data-raw/` and\ncreates an R script called `mmash.R` in that folder. This is where we\nwill store the raw, original MMASH data that we'll get from the website.\nThe R script should have opened up for you, otherwise, go into the\n`data-raw/` folder and open up the new `mmash.R` script.\n\nThe first thing we want do is delete all the code in the script that is\nadded there by default. Then we'll create a new line at the top and type\nout:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> here() starts at /home/luke/Documents/rostools/r-cubed-intermediate\n```\n:::\n:::\n\n\nThe `{here}` package was described in the [Management of R\nProjects](https://r-cubed-intro.rostools.org/sessions/project-management.html)\nof the introductory course and makes it easier to refer to other files\nin an R project. Read through the [section about the here\npackage](https://r-cubed-intro.rostools.org/sessions/project-management.html#packages-data-and-file-paths)\nin the introductory R course.\n\nR works based on the current *working directory*, which you can see on\nthe top of the RStudio Console pane, which you can see in the red box\ninside the image below. When in an RStudio R Project, the working\ndirectory is the folder where the `.Rproj` file is located. When you run\nscripts in R with `source()`, sometimes the working directory will be\nset to where the R script is located. So you can sometimes encounter\nproblems with finding files. Instead, when you use `here()` R knows to\nstart searching for files from the `.Rproj` location.\n\n![The folder location that R does it's \"work\", called the \"working\ndirectory\", highlighted by the red\nbox.](/images/rstudio-console-working-directory.png)\n\nLet's use an example. Below is the tree of the folders and files you\nhave so far. If we open up RStudio with the `LearnR3.Rproj` file and run\ncode in the `data-raw/mmash.R`, R runs the commands assuming everything\nstarts in the `LearnR3/` folder. But! If we run the code in the\n`mmash.R` script by other ways (e.g. not with RStudio, not in an R\nProject, or with `source()`), R runs everything assuming it starts in\nthe `data-raw/` folder. This can make things tricky. What `here()` does\nis tell R to first look for the `.Rproj` file and then start looking for\nthe file we actually want. This might not make sense yet, but as we go\nthrough the course, you will see why this is important to consider.\n\n::: callout-note\nYou don't need to run the below code. But if you want to see the\nstructure and content of a directory, you can use the `dir_tree()`\nfunction from the `{fs}` package, which means \"filesystem\", by running\nthe following code in the R Console:\n\n``` r\n# To print the file list.\nfs::dir_tree(\"~/Desktop/LearnR3\", recurse = 1)\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> .\n#> ├── DESCRIPTION\n#> ├── LearnR3.Rproj\n#> ├── R\n#> │   ├── README.md\n#> │   └── functions.R\n#> ├── README.md\n#> ├── TODO.md\n#> ├── data\n#> │   └── README.md\n#> ├── data-raw\n#> │   ├── README.md\n#> │   └── mmash.R\n#> └── doc\n#>     ├── README.md\n#>     ├── learning.qmd\n#>     └── report.Rmd\n```\n:::\n:::\n\n:::\n\nAlright, the next step is to download the dataset. Paste this code into\nthe `data-raw/mmash.R` script:\n\n``` r\nmmash_link <- \"https://physionet.org/static/published-projects/mmash/multilevel-monitoring-of-activity-and-sleep-in-healthy-people-1.0.0.zip\"\n```\n\n> *Note*: Sometimes the PhysioNet website is slow. If that's the case,\n> use the `r3::mmash_data_link` instead of the link used above. In this\n> case, it will look like `mmash_link <- r3::mmash_data_link`.\n\nThen we're going to write out the function `download.file()` to download\nand save the zip dataset. We're going to save the zip file to\n`data-raw/mmash-data.zip` with the `destfile` argument. This code should\nbe written in the `data-raw/mmash.R` file. Run these lines of code to\ndownload the dataset.\n\n``` r\ndownload.file(mmash_link, destfile = here(\"data-raw/mmash-data.zip\"))\n```\n\n\n::: {.cell}\n\n:::\n\n\n*After* downloading the zip file (it should be called `mmash-data.zip`\nin the `data-raw/` folder), comment out this line, so that inside the\n`data-raw/mmash.R` script it looks like:\n\n``` r\n# download.file(mmash_link, destfile = here(\"data-raw/mmash-data.zip\"))\n```\n\nWe do this because we don't want to accidentally run this code again,\nsince we already downloaded the file.\n\nBecause the original dataset is stored elsewhere on a website, we don't\nneed to save it to our Git history. Add the zip file to the Git ignore\nlist by typing out and run this code in the Console. You only need to do\nthis once.\n\n``` r\nusethis::use_git_ignore(\"data-raw/mmash-data.zip\")\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n#> ✔ Setting active project to '/tmp/Rtmpr6cQ6r/LearnR3'\n#> ✔ Adding 'data-raw/mmash-data.zip' to '.gitignore'\n#> ✔ Setting active project to '<no active project>'\n```\n:::\n:::\n\n\nNext, open up the zip file with your File Manager and look at what is\ninside. There should be the license file, another file to check if the\ndownload worked correctly (the SHA file, which you don't need to worry\nabout), and another zip file of the dataset. Because we are starting\nwith the original raw `mmash-data.zip`, we should record exactly how we\nprocess the data set for use. This relates to the key principal of\n*\"keep your raw data raw\"*, as in don't edit or touch your raw data, let\nR or another programming language process it. This lets you have a\nhistory of what was done to the raw data. During data collection and\nentry, programs like Excel or Google Sheets are incredibly powerful. But\nafter collection is done, don't make edits directly to the data unless\nabsolutely necessary.\n\nA quick comment about whether you should save your *raw* data in\n`data-raw/`. A general guideline is:\n\n-   *Do* store it to `data-raw/` if the data will only be used for the\n    one project. Use the `data-raw/` R script to be the record for how\n    you processed your data for the final analysis work.\n-   *Don't* save it to `data-raw/` if: 1) there is a central dataset\n    that multiple people use for multiple projects; or 2) you have the\n    data online. Instead, use the `data-raw/` R script to be the record\n    for which website or central location you extracted it from and how\n    you later processed it.\n-   *Don't* save it to a project-specific `data-raw/` folder if you will\n    use the raw data for multiple projects. Instead, create a central\n    location for the data *for yourself* so that you can point all other\n    projects to it and use their individual `data-raw/` R scripts as the\n    record for how you processed the raw data.\n\nUnzip the zip files by using the `unzip()` function and writing it in\n`data-raw/mmash.R` below the `download.file()` function. The main\nargument for `unzip()` is the zip file and the next important one is\ncalled `exdir` that tells `unzip()` which folder you want to extract the\nfiles to. The argument `junkpaths` is used here to tell `unzip()` to\nextract everything to the `data-raw/` folder (no idea why it's called\n\"junkpaths\"). This code should be written and executed in the\n`data-raw/mmash.R` script.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunzip(here(\"data-raw/mmash-data.zip\"),\n  exdir = here(\"data-raw\"),\n  junkpaths = TRUE\n)\n```\n:::\n\n\nNotice the indentations and spacings of the code. Like writing any\nlanguage, code should follow a [style\nguide](https://style.tidyverse.org). An easy way of following a style is\nby selecting your code and using RStudio's builtin style fixer with\neither `Ctrl-Shift-A` or `Code -> Reformat Code` menu item. Next, we'll\nextract the new `data-raw/MMASH.zip` file using `unzip()` again. Because\nwe want to keep the folder structure inside this zip file, we won't use\n`junkpaths`. Write and execute this code in the `data-raw/mmash.R`\nscript.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunzip(here(\"data-raw/MMASH.zip\"),\n  exdir = here(\"data-raw\")\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n#> ✔ Setting active project to '/tmp/Rtmpr6cQ6r/LearnR3'\n#> ✔ Setting active project to '<no active project>'\n```\n:::\n:::\n\n\nAlmost done! There are several files left over that we don't need, so\nyou'll need to write code in the script code that removes them. We'll\nuse the `{fs}` package to work with files. Before you change any files,\nlook into the `data-raw/` folder and confirm that the below listed files\nand folders are there.\n\n``` r\n# NOTE: You don't need to run this code,\n# its here to show how we got the file list.\nfs::dir_tree(\"data-raw\", recurse = 1)\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n#> ✔ Setting active project to '/tmp/Rtmpr6cQ6r/LearnR3'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> data-raw\n#> ├── DataPaper\n#> │   ├── user_1\n#> │   ├── user_10\n#> │   ├── user_11\n#> │   ├── user_12\n#> │   ├── user_13\n#> │   ├── user_14\n#> │   ├── user_15\n#> │   ├── user_16\n#> │   ├── user_17\n#> │   ├── user_18\n#> │   ├── user_19\n#> │   ├── user_2\n#> │   ├── user_20\n#> │   ├── user_21\n#> │   ├── user_22\n#> │   ├── user_3\n#> │   ├── user_4\n#> │   ├── user_5\n#> │   ├── user_6\n#> │   ├── user_7\n#> │   ├── user_8\n#> │   └── user_9\n#> ├── LICENSE.txt\n#> ├── MMASH.zip\n#> ├── README.md\n#> ├── SHA256SUMS.txt\n#> ├── mmash-data.zip\n#> └── mmash.R\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ✔ Setting active project to '<no active project>'\n```\n:::\n:::\n\n\nIf your files and folders in the `data-raw/` folder do not look like\nthis, start over by deleting all the files *except for* the `mmash.R`\nand `mmash-data.zip` files. Then re-run the code from beginning to end.\n\nTo tidy up the files, first, use the `file_delete()` function from fs to\ndelete all the files we originally extracted (`LICENSE.txt`,\n`SHA256SUMS.txt`, and `MMASH.zip`). Then use `file_move()` to rename the\nnew folder `data-raw/DataPaper/` to something more explicit like\n`data-raw/mmash/`. Add these lines of code to the `data-raw/mmash.R`\nscript and run them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fs)\nfile_delete(here(c(\n  \"data-raw/MMASH.zip\",\n  \"data-raw/SHA256SUMS.txt\",\n  \"data-raw/LICENSE.txt\"\n)))\nfile_move(here(\"data-raw/DataPaper\"), here(\"data-raw/mmash\"))\n```\n:::\n\n\nAfterwards, the files and folders in `data-raw/` will look like:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n#> ✔ Setting active project to '/tmp/Rtmpr6cQ6r/LearnR3'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> data-raw\n#> ├── README.md\n#> ├── mmash\n#> │   ├── user_1\n#> │   ├── user_10\n#> │   ├── user_11\n#> │   ├── user_12\n#> │   ├── user_13\n#> │   ├── user_14\n#> │   ├── user_15\n#> │   ├── user_16\n#> │   ├── user_17\n#> │   ├── user_18\n#> │   ├── user_19\n#> │   ├── user_2\n#> │   ├── user_20\n#> │   ├── user_21\n#> │   ├── user_22\n#> │   ├── user_3\n#> │   ├── user_4\n#> │   ├── user_5\n#> │   ├── user_6\n#> │   ├── user_7\n#> │   ├── user_8\n#> │   └── user_9\n#> ├── mmash-data.zip\n#> └── mmash.R\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ✔ Setting active project to '<no active project>'\n```\n:::\n:::\n\n\n```         \ndata-raw\n├── README.md\n├── mmash\n│   ├── user_1\n│   ├── user_10\n│   ├── ...\n│   ├── user_8\n│   └── user_9\n├── mmash-data.zip\n└── mmash.R\n```\n\nLike before, if your files and folders inside `data-raw/` don't look\nlike those listed above, start over again (making sure to delete all\n*but* the `mmash.R` and `mmash-data.zip` files).\n\nSince we have an R script that downloads the data and processes it for\nus, we don't need to have Git track it. So, in the Console, type out and\nrun this command:\n\n``` r\nusethis::use_git_ignore(\"data-raw/mmash/\")\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n#> ✔ Setting active project to '/tmp/Rtmpr6cQ6r/LearnR3'\n#> ✔ Adding 'data-raw/mmash/' to '.gitignore'\n#> ✔ Setting active project to '<no active project>'\n```\n:::\n:::\n\n\nThe `data-raw/mmash.R` script should look like this at this point:\n\n\n::: {.cell file='R/pre-course-script.R'}\n\n```{.r .cell-code}\nlibrary(here)\n\n# Download\nmmash_link <- \"https://physionet.org/static/published-projects/mmash/multilevel-monitoring-of-activity-and-sleep-in-healthy-people-1.0.0.zip\"\ndownload.file(mmash_link, destfile = here(\"data-raw/mmash-data.zip\"))\n\n# Unzip\nunzip(here(\"data-raw/mmash-data.zip\"),\n  exdir = here(\"data-raw\"),\n  junkpaths = TRUE\n)\nunzip(here(\"data-raw/MMASH.zip\"),\n  exdir = here(\"data-raw\")\n)\n\n# Remove/tidy up left over files\nlibrary(fs)\nfile_delete(here(c(\n  \"data-raw/MMASH.zip\",\n  \"data-raw/SHA256SUMS.txt\",\n  \"data-raw/LICENSE.txt\"\n)))\nfile_move(here(\"data-raw/DataPaper\"), here(\"data-raw/mmash\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nYou now have the data ready for the course! At this point, please run\nthis function in the Console:\n\n``` r\nr3::check_project_setup()\n```\n\n```         \n~/Desktop/LearnR3\n├── DESCRIPTION\n├── LearnR3.Rproj\n├── R\n│   ├── README.md\n│   └── functions.R\n├── README.md\n├── TODO.md\n├── data\n│   └── README.md\n├── data-raw\n│   ├── README.md\n│   ├── mmash\n│   │   ├── user_1\n│   │   ├── user_10\n│   │   ├── user_11\n│   │   ├── user_12\n│   │   ├── user_13\n│   │   ├── user_14\n│   │   ├── user_15\n│   │   ├── user_16\n│   │   ├── user_17\n│   │   ├── user_18\n│   │   ├── user_19\n│   │   ├── user_2\n│   │   ├── user_20\n│   │   ├── user_21\n│   │   ├── user_22\n│   │   ├── user_3\n│   │   ├── user_4\n│   │   ├── user_5\n│   │   ├── user_6\n│   │   ├── user_7\n│   │   ├── user_8\n│   │   └── user_9\n│   ├── mmash-data.zip\n│   └── mmash.R\n└── doc\n    ├── README.md\n    └── learning.qmd\n```\n\nThe output should look something a bit like the above text. If it\ndoesn't, start over by deleting all *but* the `mmash.R` and\n`mmash-data.zip` files and running the code from the beginning again. If\nyour output looks a bit like this, than copy and paste the output into\nthe survey question at the end.\n\n## Basic course details {#sec-course-details}\n\nMost of the course description is found in the syllabus in\n@sec-syllabus. If you haven't read it, **please read it now**. Read over\nwhat the course will cover, what we expect you to learn at the end of\nit, and what our basic assumptions are about who you are and what you\nknow. The final pre-course task is a survey that asks some questions on\nif you've read and understood it.\n\nOne goal of the course is to teach about open science, and true to our\nmission, we practice what we preach. The course material is publicly\naccessible (all on this website) and [openly\nlicensed](index.html#licensing) so you can use and re-use it for free!\nThe material and table of contents on the side is listed in the order\nthat we will cover in the course.\n\nWe have a [Code of Conduct](https://guides.rostools.org/conduct.html).\nIf you haven't read it, **read it now**. The survey at the end will ask\nabout Conduct. We want to make sure this course is a supportive and safe\nenvironment for learning, so this Code of Conduct is important.\n\nYou're almost done. Please fill out the [**pre-course\nsurvey**](https://docs.google.com/forms/d/e/1FAIpQLSe2gpbN9ExCXyeTfJLgu_poemF0iUtkcihnCunXl3YA4e1hHQ/viewform?usp=sf_link)\nto finish this assignment.\n\nSee you at the course!\n\n\n\n",
    "supporting": [
      "pre-course_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}